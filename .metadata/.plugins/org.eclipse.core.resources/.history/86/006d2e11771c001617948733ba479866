
public class Transmit implements AESCipher {
	// table used to mixColumns
	private final int[][] galois = { { 0x02, 0x03, 0x01, 0x01 }, { 0x01, 0x02, 0x03, 0x01 }, { 0x01, 0x01, 0x02, 0x03 },
			{ 0x03, 0x01, 0x01, 0x02 } };

	private final int[][] sbox = {
			{ 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76 },
			{ 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0 },
			{ 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15 },
			{ 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75 },
			{ 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84 },
			{ 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf },
			{ 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8 },
			{ 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2 },
			{ 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73 },
			{ 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb },
			{ 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79 },
			{ 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08 },
			{ 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a },
			{ 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e },
			{ 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf },
			{ 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 } };

	// sbox used to exand the key
	public final int[][] sbox_exp = {
			{ 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76 },
			{ 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0 },
			{ 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15 },
			{ 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75 },
			{ 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84 },
			{ 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf },
			{ 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8 },
			{ 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2 },
			{ 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73 },
			{ 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb },
			{ 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79 },
			{ 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08 },
			{ 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a },
			{ 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e },
			{ 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf },
			{ 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 } };

	// rcon used to expand the key
	public final int[] rcon = { 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab,
			0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
			0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8,
			0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f,
			0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3,
			0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01,
			0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
			0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2,
			0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08,
			0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
			0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a,
			0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
			0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
			0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66,
			0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d };

	private byte[][] keySched;
	private byte[][] originalKey;
	private int keyColumn; // for addRoundKey method

	public Transmit() {
		keySched = new byte[4][44];
		originalKey = new byte[][] { { 0x74, 0x68, 0x69, 0x73 }, { 0x49, 0x73, 0x4f, 0x75 }, { 0x72, 0x41, 0x45, 0x53 },
				{ 0x4b, 0x65, 0x79, 0x21 } };
				// translates to "thisIsOurAESKey!"

		// fill in first 4x4 of schedule with the original key
		for (int r = 0; r < 4; r++) {
			for (int c = 0; c < 4; c++) {
				keySched[r][c] = originalKey[r][c];
			}
		}
		keyColumn = 3; // initializes to index of first column in the first
						// round key
	}

	@Override
	public byte[][] encrypt(byte[][] state) {
		keyColumn = 4;
		// String pText = text;
		// String pKey = key;
		byte[][] stateList = new byte[4][4];

		stateList = addRoundKey(state);

		for (int i = 0; i < 8; i++) {
			stateList = subBytes(stateList);
			stateList = shiftRows(stateList);
			stateList = mixColumns(stateList);
			stateList = addRoundKey(stateList);
		}

		stateList = subBytes(stateList);
		stateList = shiftRows(stateList);
		stateList = mixColumns(stateList);

		return stateList;
	}

	@Override
	public void decrypt(byte[][] cipher, String key) {

	}

	@Override
	public byte[][] subBytes(byte[][] state) {
		byte[][] subList = new byte[state.length][state[0].length];
		subList = state;
		for (int r = 0; r < state.length; r++) {
			for (int c = 0; c < state[0].length; c++) {
				subList[r][c] = (byte) sbox[(state[r][c] & 0xF0) >> 4][(state[r][c] & 0x0F)];
			}
		}
		return subList;
	}

	public byte[][] invSubBytes(byte[][] state) {
		byte[][] subList = new byte[state.length][state[0].length];

		return subList;
	}

	@Override
	public byte[][] shiftRows(byte[][] state) {
		byte[][] shiftList = new byte[state.length][state[0].length];
		for (int i = 0; i < shiftList.length; i++) {
			for (int j = 0; j < shiftList[0].length; j++) {
				shiftList[i][j] = state[i][j];
			}
		}
		for (int r = 0; r < shiftList.length; r++) {
			for (int c = 0; c < shiftList[0].length; c++) {
				shiftList[r][c] = state[r][(c + r) % (shiftList.length)];
			}
		}
		return shiftList;
	}

	@Override
	public byte[][] mixColumns(byte[][] state) {
		byte[][] mixList = new byte[state.length][state[0].length];
		for (int c = 0; c < state[0].length; c++) {
			for (int g = 0; g < galois[0].length; g++) {
				mixList[g][c] = (byte) (FFMul((byte) galois[0][g], state[g][0])
						^ FFMul((byte) galois[1][g], state[g][1]) ^ FFMul((byte) galois[2][g], state[g][2])
						^ FFMul((byte) galois[3][g], state[g][3]));
			}
		}
		return mixList;
	}

	@Override
	public byte[][] addRoundKey(byte[][] state) {
		for (int r = 0; r < state.length; r++) {
			for (int c = 0; c < state[0].length; c++) {
				state[r][c] ^= keySched[r][c + keyColumn];
			}
		}
		keyColumn += 4;
		return state;
	}

	// used in mixColumns to do crazy multiplication :)
	public byte FFMul(byte a, byte b) {
		byte aa = a, bb = b, r = 0, t;
		while (aa != 0) {
			if ((aa & 1) != 0)
				r = (byte) (r ^ bb);
			t = (byte) (bb & 0x80);
			bb = (byte) (bb << 1);
			if (t != 0)
				bb = (byte) (bb ^ 0x1b);
			aa = (byte) ((aa & 0xff) >> 1);
		}
		return r;
	}

	// ---------- key expansion methods ----------

	public void expandKey() {

		int index = 0; // indicates index of the first column of each round

		for (int round = 0; round < 10; round++) {
			expandLastCol(index);
			expandOtherCol(index + 5);
			expandOtherCol(index + 6);
			expandOtherCol(index + 7);

			index = index + 4; // go to next round
		}

	}

	// works on last column of each round key
	public void expandLastCol(int index) {

		int[][] column = new int[4][1];

		// rotate last column of key + substitute with sbox
		byte top = keySched[0][index + 3];
		column[0][0] = subBytes(keySched[1][index + 3]);
		column[1][0] = subBytes(keySched[2][index + 3]);
		column[2][0] = subBytes(keySched[3][index + 3]);
		column[3][0] = subBytes(top);

		// XOR top item with round constant
		column[0][0] = column[0][0] ^ rcon[index / 4];

		// fill in first column of new round
		keySched[0][index + 4] = (byte) (column[0][0] ^ keySched[0][index]);
		keySched[1][index + 4] = (byte) (column[1][0] ^ keySched[1][index]);
		keySched[2][index + 4] = (byte) (column[2][0] ^ keySched[2][index]);
		keySched[3][index + 4] = (byte) (column[3][0] ^ keySched[3][index]);

	}

	public void expandOtherCol(int col) {

		// XOR previous column with the same column of previous round key
		keySched[0][col] = (byte) (keySched[0][col - 1] ^ keySched[0][col - 4]);
		keySched[1][col] = (byte) (keySched[1][col - 1] ^ keySched[1][col - 4]);
		keySched[2][col] = (byte) (keySched[2][col - 1] ^ keySched[2][col - 4]);
		keySched[3][col] = (byte) (keySched[3][col - 1] ^ keySched[3][col - 4]);

	}

	public byte subBytes(byte b) {

		// substitute using s-box
		return (byte) sbox_exp[(b & 0xf0) >> 4][b & 0x0f];

	}

	@Override
	public String toString() {
		String output = "";

		return output;
	}
}
